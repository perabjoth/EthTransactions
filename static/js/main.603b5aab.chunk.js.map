{"version":3,"sources":["api/etherscan.js","components/LastSeen.js","components/BlockExplorer.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","LastSeen","date","ReactTimeAgo","locale","BlockExplorer","props","getTransactions","e","a","preventDefault","validAddress","web3","utils","isAddress","state","walletAddress","setState","validationDone","addressblock","blockNumber","localStorage","getItem","setData","JSON","parse","setDataLoaded","setIsLoading","etherscan","get","then","response","data","result","catch","console","error","isLoading","dataLoaded","value","this","formattedData","rel","tableRows","i","totalGas","gasPrice","gasUsed","timeStampDate","Date","timeStamp","push","className","rowSpan","hash","input","getTime","from","to","fromWei","toString","Table","striped","bordered","hover","variant","Container","Row","Form","FormGroup","controlId","FormLabel","FormControl","isValid","isInvalid","required","type","placeholder","onChange","setWalletAddress","target","min","setBlockNumber","onClick","Spinner","animation","generateTable","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","TimeAgo","addDefaultLocale","en","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.603b5aab.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://api.etherscan.io/api?apikey=86EN8PWG19958EDT7YK94CRHQME477UYKM\"\r\n});\r\n","import React from 'react'\r\nimport ReactTimeAgo from 'react-time-ago'\r\n\r\nexport default function LastSeen({ date }) {\r\n  return (\r\n      <ReactTimeAgo date={date} locale=\"en-US\"/>\r\n  )\r\n}","import React, { Component } from 'react';\r\nimport web3 from 'web3';\r\nimport { Container, Form, FormControl, FormGroup, FormLabel, Row, Spinner, Table } from 'react-bootstrap';\r\nimport etherscan from '../api/etherscan';\r\nimport LastSeen from './LastSeen';\r\n\r\nexport default class BlockExplorer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            walletAddress: \"\",\r\n            validAddress: true,\r\n            validationDone: false,\r\n            blockNumber: 0,\r\n            isLoading: false,\r\n            dataLoaded: false,\r\n            data: []\r\n        };\r\n    }\r\n\r\n    setIsLoading(value) {\r\n        this.setState({ isLoading: value })\r\n    }\r\n\r\n    setDataLoaded(value) {\r\n        this.setState({\r\n            dataLoaded: value\r\n        });\r\n    }\r\n\r\n    setData(data) {\r\n        this.setState({\r\n            data: data\r\n        });\r\n    }\r\n\r\n    getTransactions = async (e) => {\r\n        e.preventDefault();\r\n        let validAddress = web3.utils.isAddress(this.state.walletAddress)\r\n\r\n        this.setState({\r\n            validAddress: validAddress,\r\n            validationDone: true\r\n        });\r\n\r\n        if (validAddress) {\r\n            let addressblock = this.state.walletAddress + '+' + this.state.blockNumber\r\n            if (localStorage.getItem(addressblock)) {\r\n                this.setData(JSON.parse(localStorage.getItem(addressblock)));\r\n                this.setDataLoaded(true);\r\n            } else {\r\n                this.setIsLoading(true);\r\n                await etherscan\r\n                    .get(`&module=account&action=txlist&address=${this.state.walletAddress}&startblock=${this.state.blockNumber}&endblock=99999999&sort=desc`)\r\n                    .then((response) => {\r\n                        this.setData(response.data.result);\r\n                        //localStorage.setItem(addressblock, JSON.stringify(response.data.result));\r\n                        this.setDataLoaded(true);\r\n                        this.setIsLoading(false);\r\n                    }).catch((e) => {\r\n                        console.error(e);\r\n                        this.setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    setWalletAddress(walletAddress) {\r\n        this.setState({\r\n            walletAddress: walletAddress,\r\n            validationDone: false\r\n        });\r\n    }\r\n\r\n    setBlockNumber(blockNumber) {\r\n        this.setState({\r\n            blockNumber: blockNumber,\r\n            validationDone: false\r\n        });\r\n    }\r\n\r\n    rowSpan(data, formattedData) {\r\n        return <span rel=\"tooltip\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title={data}>{formattedData ? formattedData : data}</span>\r\n    }\r\n\r\n    generateTable(data) {\r\n\r\n        let tableRows = [];\r\n\r\n        for (const i in data) {\r\n            let totalGas = data[i].gasPrice * data[i].gasUsed;\r\n            let timeStampDate = new Date(data[i].timeStamp * 1000);\r\n            tableRows.push(<tr key={data[i].hash}>\r\n                <td className=\"ellipsis col hash\">{this.rowSpan(data[i].hash)}</td>\r\n                <td className=\"ellipsis col input\">{data[i].input}</td>\r\n                <td className=\"ellipsis col blockNumber\">{data[i].blockNumber}</td>\r\n                <td className=\"ellipsis col timeStamp\">{LastSeen({ date: timeStampDate.getTime() })}</td>\r\n                <td className=\"ellipsis col from\">{data[i].from}</td>\r\n                <td className=\"ellipsis col to\">{data[i].to}</td>\r\n                <td className=\"ellipsis col value\">{web3.utils.fromWei(data[i].value)}</td>\r\n                <td className=\"ellipsis col fee\">{web3.utils.fromWei(totalGas.toString())}</td>\r\n            </tr>)\r\n        }\r\n\r\n        if (tableRows) {\r\n            tableRows = <tbody>{tableRows}</tbody>\r\n        }\r\n\r\n        return (<div>\r\n            <br />\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Txn #</th>\r\n                        <th>Method</th>\r\n                        <th>Block</th>\r\n                        <th>Age</th>\r\n                        <th>From</th>\r\n                        <th>To</th>\r\n                        <th>Value</th>\r\n                        <th>Txn Fee</th>\r\n                    </tr>\r\n                </thead>\r\n                {tableRows}\r\n            </Table>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"h-100\">\r\n                <Row className=\"align-items-center\">\r\n                    <div className=\"col-3\" ></div>\r\n                    <Form className=\"col-6\" >\r\n                        <h1 className=\"text-center\">Get Transactions</h1>\r\n                        <FormGroup controlId=\"walletaddress\">\r\n                            <br />\r\n                            <FormLabel>Wallet Address</FormLabel>\r\n                            <FormControl\r\n                                isValid={this.state.validationDone && this.state.validAddress}\r\n                                isInvalid={this.state.validationDone && !this.state.validAddress}\r\n                                required\r\n                                type=\"text\"\r\n                                placeholder=\"Wallet Address\"\r\n                                onChange={(e) => { this.setWalletAddress(e.target.value) }} />\r\n                            <br />\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"blocknumber\">\r\n                            <FormLabel>Block Number</FormLabel>\r\n                            <FormControl\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                placeholder=\"Block Number\"\r\n                                onChange={(e) => { this.setBlockNumber(e.target.value) }} />\r\n                            <br />\r\n                            {!this.state.isLoading && <FormControl type=\"submit\" className=\"btn btn-primary\" value=\"Submit\" onClick={(e) => this.getTransactions(e)} />}\r\n                            {this.state.isLoading && <Spinner animation=\"border text-center\" ></Spinner>}\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <div className=\"col-3\" ></div>\r\n                </Row>\r\n                {this.state.dataLoaded &&\r\n                                this.generateTable(this.state.data)\r\n                            }\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport BlockExplorer from './components/BlockExplorer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <BlockExplorer></BlockExplorer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport TimeAgo from 'javascript-time-ago';\n\nimport en from 'javascript-time-ago/locale/en.json';\n\nTimeAgo.addDefaultLocale(en)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}